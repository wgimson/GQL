package gqlMain;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 21 20:52:32 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;
import java.util.HashMap;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 21 20:52:32 EDT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\004\000\002\003" +
    "\006\000\002\003\010\000\002\003\010\000\002\003\012" +
    "\000\002\004\003\000\002\004\005\000\002\005\003\000" +
    "\002\005\005\000\002\006\005\000\002\007\003\000\002" +
    "\010\005\000\002\011\005\000\002\012\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\005\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\015\006\000\002" +
    "\021\005\000\002\016\003\000\002\016\005\000\002\016" +
    "\004\000\002\016\006\000\002\022\003\000\002\022\006" +
    "\000\002\024\006\000\002\024\007\000\002\024\007\000" +
    "\002\024\007\000\002\017\003\000\002\020\003\000\002" +
    "\020\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\006\000\002\023\003\000\002\023\006\000\002\026\003" +
    "\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\017\005\020\007\001\002\000\004\002" +
    "\140\001\002\000\004\024\123\001\002\000\004\004\120" +
    "\001\002\000\004\024\011\001\002\000\010\005\ufffb\022" +
    "\ufffb\023\ufffb\001\002\000\004\021\061\001\002\000\010" +
    "\005\013\022\015\023\014\001\002\000\004\024\011\001" +
    "\002\000\004\024\022\001\002\000\004\006\017\001\002" +
    "\000\004\004\uffff\001\002\000\004\024\022\001\002\000" +
    "\006\005\ufff3\007\ufff3\001\002\000\006\005\036\007\037" +
    "\001\002\000\022\005\uffec\007\uffec\010\024\012\uffec\022" +
    "\uffec\030\uffec\031\uffec\034\023\001\002\000\020\005\uffea" +
    "\007\uffea\010\034\012\uffea\022\uffea\030\uffea\031\uffea\001" +
    "\002\000\004\024\026\001\002\000\016\005\uffeb\007\uffeb" +
    "\012\uffeb\022\uffeb\030\uffeb\031\uffeb\001\002\000\022\005" +
    "\uffe7\007\uffe7\010\030\012\uffe7\022\uffe7\030\uffe7\031\uffe7" +
    "\034\027\001\002\000\020\005\uffe5\007\uffe5\010\032\012" +
    "\uffe5\022\uffe5\030\uffe5\031\uffe5\001\002\000\004\024\026" +
    "\001\002\000\016\005\uffe6\007\uffe6\012\uffe6\022\uffe6\030" +
    "\uffe6\031\uffe6\001\002\000\004\024\026\001\002\000\016" +
    "\005\uffe4\007\uffe4\012\uffe4\022\uffe4\030\uffe4\031\uffe4\001" +
    "\002\000\004\024\026\001\002\000\016\005\uffe9\007\uffe9" +
    "\012\uffe9\022\uffe9\030\uffe9\031\uffe9\001\002\000\004\024" +
    "\022\001\002\000\004\004\ufff7\001\002\000\006\005\ufff2" +
    "\007\ufff2\001\002\000\004\022\056\001\002\000\006\022" +
    "\ufff6\031\054\001\002\000\004\030\046\001\002\000\004" +
    "\030\uffdd\001\002\000\010\012\ufff1\022\ufff1\031\ufff1\001" +
    "\002\000\010\024\022\032\050\033\047\001\002\000\010" +
    "\012\uffd4\022\uffd4\031\uffd4\001\002\000\010\012\uffd5\022" +
    "\uffd5\031\uffd5\001\002\000\010\012\uffdb\022\uffdb\031\uffdb" +
    "\001\002\000\010\012\uffdc\022\uffdc\031\uffdc\001\002\000" +
    "\010\012\uffe8\022\uffe8\031\uffe8\001\002\000\004\024\022" +
    "\001\002\000\010\012\ufff0\022\ufff0\031\ufff0\001\002\000" +
    "\004\006\017\001\002\000\004\004\ufffd\001\002\000\010" +
    "\005\ufffa\022\ufffa\023\ufffa\001\002\000\010\025\062\026" +
    "\063\027\065\001\002\000\004\024\113\001\002\000\004" +
    "\024\113\001\002\000\010\005\ufff5\022\ufff5\023\ufff5\001" +
    "\002\000\004\024\067\001\002\000\012\005\uffed\020\uffed" +
    "\022\uffed\023\uffed\001\002\000\004\024\071\001\002\000" +
    "\004\013\102\001\002\000\016\005\uffd7\011\072\013\uffd7" +
    "\020\uffd7\022\uffd7\023\uffd7\001\002\000\006\006\075\024" +
    "\022\001\002\000\004\012\101\001\002\000\006\012\uffda" +
    "\031\054\001\002\000\004\024\076\001\002\000\004\007" +
    "\077\001\002\000\006\012\uffd9\024\022\001\002\000\006" +
    "\012\uffd8\031\054\001\002\000\014\005\uffd6\013\uffd6\020" +
    "\uffd6\022\uffd6\023\uffd6\001\002\000\012\014\104\024\071" +
    "\034\103\035\105\001\002\000\004\024\071\001\002\000" +
    "\004\024\071\001\002\000\004\024\071\001\002\000\012" +
    "\005\uffe1\020\uffe1\022\uffe1\023\uffe1\001\002\000\012\005" +
    "\uffe0\020\uffe0\022\uffe0\023\uffe0\001\002\000\012\005\uffdf" +
    "\020\uffdf\022\uffdf\023\uffdf\001\002\000\012\005\uffde\020" +
    "\uffde\022\uffde\023\uffde\001\002\000\012\005\uffee\020\uffee" +
    "\022\uffee\023\uffee\001\002\000\014\005\uffe3\011\114\020" +
    "\uffe3\022\uffe3\023\uffe3\001\002\000\006\006\075\024\022" +
    "\001\002\000\004\012\116\001\002\000\012\005\uffe2\020" +
    "\uffe2\022\uffe2\023\uffe2\001\002\000\012\005\uffef\020\uffef" +
    "\022\uffef\023\uffef\001\002\000\004\002\001\001\002\000" +
    "\006\005\ufff9\020\ufff9\001\002\000\006\005\126\020\127" +
    "\001\002\000\004\015\124\001\002\000\010\025\062\026" +
    "\063\027\065\001\002\000\006\005\ufff4\020\ufff4\001\002" +
    "\000\004\024\123\001\002\000\004\024\011\001\002\000" +
    "\010\005\013\022\132\023\131\001\002\000\004\024\022" +
    "\001\002\000\004\006\017\001\002\000\004\004\ufffe\001" +
    "\002\000\004\022\135\001\002\000\004\006\017\001\002" +
    "\000\004\004\ufffc\001\002\000\006\005\ufff8\020\ufff8\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\006\005\121\011\120\001\001\000\002\001\001" +
    "\000\006\004\011\010\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\057\001\001" +
    "\000\014\007\040\013\041\015\043\017\042\021\044\001" +
    "\001\000\004\006\015\001\001\000\002\001\001\000\006" +
    "\012\020\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\030\001\001\000\002\001\001\000\004" +
    "\016\032\001\001\000\002\001\001\000\004\016\034\001" +
    "\001\000\002\001\001\000\004\015\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\050\020\052\026\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\043\017\042\021\054\001" +
    "\001\000\002\001\001\000\004\006\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\063\001\001\000" +
    "\004\022\116\001\001\000\004\022\111\001\001\000\002" +
    "\001\001\000\004\024\065\001\001\000\002\001\001\000" +
    "\004\023\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\073\015\043\017\042\021\044\025\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\077\015\043\017\042\021" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\105\001\001\000\004\023\110\001\001\000\004\023" +
    "\107\001\001\000\004\023\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\073\015\043" +
    "\017\042\021\044\025\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\124\001\001\000\002\001\001\000\004\011\136\001\001" +
    "\000\006\004\127\010\007\001\001\000\002\001\001\000" +
    "\014\007\133\013\041\015\043\017\042\021\044\001\001" +
    "\000\004\006\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* the reason for the error is passed into the following method through the
       'message' String */
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");

        /* Check if information passed to the method is the same type as 
           java_cup.runtime.Symbol */
        if (info instanceof java_cup.runtime.Symbol) {
            
            /* Declare a java_cup.runtime.Symbol object 's' which will wrap the
               information in the Object 'info' */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if line number in 'info' is greater than of equal to 
               zero */
            if (s.left >= 0) {

                /* Add the line number of the error to the end of the 
                   StringBuffer error message */
                m.append(" in line " + (s.left + 1));

                /* Check if the column number in 'info' is greater than of equal 
                   to zero */
                if (s.right >= 0) {

                    /* Add the column number of the error to the end of the 
                       StringBuffer error message */
                    m.append(", column " + (s.right + 1));
                }
            }
        }

        /* Add error message passed into the method to the end of 
        StringBuffer */
	    m.append(" : " + message);

	    /* Print contents of StringBuffer m */
	    System.err.println(m);
      }

      /* Change method report_fatal_error so it will display the line and column
         number of the error as well as the reason for the error, which is 
         passed in with the Object 'message' */
      public void report_fatal_error(String message, Object info) {
          report_error(message, info);
          System.exit(1);
      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant_expr ::= STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = str; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // constant_expr ::= NUMBER 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // node_expr ::= VARIABLE LBRACK predicate RBRACK 
            {
              NodeOrEdgeObject RESULT =null;
		int argNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String argName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int predleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Predicate pred = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Argument headArg = new Argument(argName);
       NodeOrEdgeObject nodeOrEdge = new NodeOrEdgeObject(headArg, pred);
       nodeOrEdge.setIsNode(true);
       RESULT = nodeOrEdge; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // node_expr ::= VARIABLE 
            {
              NodeOrEdgeObject RESULT =null;
		int argNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String argName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument headArg = new Argument(argName);
       NodeOrEdgeObject nodeOrEdge = new NodeOrEdgeObject(headArg);
       nodeOrEdge.setIsNode(true);
       RESULT = nodeOrEdge; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // predicate ::= LPAREN VARIABLE RPAREN conditional_expr 
            {
              Predicate RESULT =null;
		int subclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int subclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String subclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Condition> conds = (Vector<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Predicate pred = new Predicate(subclass, conds);
       RESULT = pred; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // predicate ::= LPAREN VARIABLE RPAREN 
            {
              Predicate RESULT =null;
		int subclassleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subclassright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String subclass = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Predicate pred = new Predicate(subclass);   
       RESULT = pred; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // predicate ::= conditional_expr 
            {
              Predicate RESULT =null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Condition> conds = (Vector<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Predicate pred = new Predicate(conds);
       RESULT = pred; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // r_dot_expr ::= variable_expr 
            {
              Argument RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument var = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_dot_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // r_dot_expr ::= constant_expr 
            {
              Argument RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cons = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument();
       arg.setConstant(cons); 
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r_dot_expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // l_dot_expr ::= variable_expr 
            {
              Argument RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument var = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_dot_expr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_path_expr ::= VARIABLE node_expr UNDERSCORE POSNUMBER node_expr 
            {
              SimplePath RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodeOrEdgeObject lOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int posNumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int posNumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String posNum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject rOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SimplePath path = new SimplePath(varName, lOp, rOp);
       path.setIsFixedLengthPath(true);
       path.setPathLength(posNum);
       RESULT = path; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_path_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_path_expr ::= VARIABLE node_expr UNDERSCORE STAR node_expr 
            {
              SimplePath RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodeOrEdgeObject lOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject rOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SimplePath path = new SimplePath(varName, lOp, rOp);
       path.setIsEveryPath(true);
       RESULT = path; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_path_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_path_expr ::= VARIABLE node_expr UNDERSCORE S node_expr 
            {
              SimplePath RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodeOrEdgeObject lOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject rOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SimplePath path = new SimplePath(varName, lOp, rOp); // the S or just
       path.setIsShortestPath(true); // lumping it in with the next variable
       RESULT = path; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_path_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_path_expr ::= VARIABLE node_expr UNDERSCORE node_expr 
            {
              SimplePath RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeOrEdgeObject lOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject rOp = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 SimplePath path = new SimplePath(varName, lOp, rOp);
       RESULT = path; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_path_expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // node_or_edge_expr ::= VARIABLE LBRACK predicate RBRACK 
            {
              NodeOrEdgeObject RESULT =null;
		int argNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String argName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int predleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Predicate pred = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Argument headArg = new Argument(argName);
       headArg.setIsObject(true);
       NodeOrEdgeObject nodeOrEdge = new NodeOrEdgeObject(headArg, pred);
       RESULT = nodeOrEdge; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_or_edge_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // node_or_edge_expr ::= VARIABLE 
            {
              NodeOrEdgeObject RESULT =null;
		int argNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String argName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument headArg = new Argument(argName);
       headArg.setIsObject(true);
       NodeOrEdgeObject nodeOrEdge = new NodeOrEdgeObject(headArg);
       RESULT = nodeOrEdge; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("node_or_edge_expr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dot_member ::= VARIABLE POSNUMBER DOT dot_member 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dotMemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotMemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument dotMem = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);
       arg.setIsSequence(true);
       Argument sequenceChild = 
               new Argument(Integer.valueOf(num.substring(1,num.length()-1)).intValue());
       sequenceChild.setIsSequenceChild(true);
       sequenceChild.setIsObject(true);
       sequenceChild.setChild(dotMem);
       dotMem.setParent(sequenceChild);
       arg.setChild(sequenceChild);
       sequenceChild.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dot_member",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dot_member ::= VARIABLE POSNUMBER 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);
       arg.setIsSequence(true);
       Argument sequenceChild = 
           new Argument(Integer.valueOf(num.substring(1,num.length()-1)).intValue());
       sequenceChild.setIsSequenceChild(true);
       arg.setChild(sequenceChild);
       sequenceChild.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dot_member",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dot_member ::= VARIABLE DOT dot_member 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dotMemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotMemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument dotMem = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);
       arg.setIsObject(true);
       arg.setChild(dotMem);
       dotMem.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dot_member",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dot_member ::= VARIABLE 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);
       arg.setIsMemberVariable(true);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dot_member",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_conditional_expr ::= l_dot_expr COMPARISON r_dot_expr 
            {
              Condition RESULT =null;
		int lDotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lDotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument lDot = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rDotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rDotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument rDot = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Condition cond = new Condition(comp, lDot, rDot);
       RESULT = cond; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_conditional_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_expr ::= VARIABLE POSNUMBER DOT dot_member 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dotMemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotMemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument dotMem = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);
       arg.setIsSequence(true);
       Argument sequenceChild = 
           new Argument(Integer.valueOf(num.substring(1,num.length()-1)).intValue());
       sequenceChild.setIsSequenceChild(true);
       sequenceChild.setIsObject(true);
       sequenceChild.setChild(dotMem); 
       dotMem.setParent(sequenceChild);
       arg.setChild(sequenceChild);
       sequenceChild.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_expr ::= VARIABLE POSNUMBER 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName); // Argument class to accomodate 
       arg.setIsSequence(true); // larger numbers
       Argument sequenceChild = 
           new Argument(Integer.valueOf(num.substring(1,num.length()-1)).intValue());
       sequenceChild.setIsSequenceChild(true);
       arg.setChild(sequenceChild);
       sequenceChild.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_expr ::= VARIABLE DOT dot_member 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dotMemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotMemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument dotMem = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName); 
       arg.setIsObject(true);
       arg.setChild(dotMem);
       dotMem.setParent(arg);
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_expr ::= VARIABLE 
            {
              Argument RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Argument arg = new Argument(varName);   
       //arg.setIsObject(true);             // we changed the grammar so that the head argument is
       RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graph_object_expr ::= PATHS simple_path_expr 
            {
              GraphObject RESULT =null;
		int simplePathleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simplePathright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimplePath simplePath = (SimplePath)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GraphObject gObj = new GraphObject(simplePath);
       gObj.setIsPath(true);
       RESULT = gObj; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graph_object_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // graph_object_expr ::= EDGES node_or_edge_expr 
            {
              GraphObject RESULT =null;
		int eExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject eExpr = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GraphObject gObj = new GraphObject(eExpr);
       gObj.setIsEdge(true);
       RESULT = gObj; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graph_object_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // graph_object_expr ::= NODES node_or_edge_expr 
            {
              GraphObject RESULT =null;
		int nExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodeOrEdgeObject nExpr = (NodeOrEdgeObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GraphObject gObj = new GraphObject(nExpr);
       gObj.setIsNode(true);
       RESULT = gObj; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graph_object_expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // conditional_expr ::= conditional_expr AND simple_conditional_expr 
            {
              Vector<Condition> RESULT =null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<Condition> conds = (Vector<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int simpleCondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpleCondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition simpleCond = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<Condition> conditions = new Vector();
       conditions.add(simpleCond);
       conditions.addAll(conds);
       RESULT = conditions; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // conditional_expr ::= simple_conditional_expr 
            {
              Vector<Condition> RESULT =null;
		int simpleCondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpleCondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Condition simpleCond = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<Condition> conditions = new Vector();
       conditions.add(simpleCond);
       RESULT = conditions; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return_expr ::= return_expr COMMA variable_expr 
            {
              LinkedList<Argument> RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Argument> ret = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument var = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Argument> retList = new LinkedList();
       retList.add(var);
       retList.addAll(ret);
       RESULT = retList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return_expr ::= variable_expr 
            {
              LinkedList<Argument> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument var = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Argument> retList = new LinkedList();
       retList.add(var);
       RESULT = retList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // let_expr ::= VARIABLE EQUAL graph_object_expr 
            {
              ForOrLetObject RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int graphObjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graphObjright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GraphObject graphObj = (GraphObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ForOrLetObject letExpression = new ForOrLetObject(varName, graphObj);
       letExpression.setIsLet(true);
       RESULT = letExpression; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // for_expr ::= VARIABLE IN graph_object_expr 
            {
              ForOrLetObject RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int graphObjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graphObjright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GraphObject graphObj = (GraphObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ForOrLetObject forExpression = new ForOrLetObject(varName, graphObj);
       forExpression.setIsFor(true);
       RESULT = forExpression; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // where_clause ::= conditional_expr 
            {
              HashMap RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Condition> cond = (Vector<Condition>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 HashMap<Integer, Vector<Condition>> whereClause = new HashMap();
       whereClause.put((Integer) whereClause.size()+1, cond);
       RESULT = whereClause; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where_clause",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return_clause ::= LPAREN return_expr RPAREN 
            {
              LinkedList<Argument> RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Argument> ret = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ret; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_clause",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // let_clause ::= let_clause COMMA let_expr 
            {
              Vector<ForOrLetObject> RESULT =null;
		int letCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int letCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<ForOrLetObject> letC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForOrLetObject let = (ForOrLetObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<ForOrLetObject> letClause = new Vector();
       letClause.add(let);
       letClause.addAll(letC);
       RESULT = letClause; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_clause",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // let_clause ::= let_expr 
            {
              Vector<ForOrLetObject> RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForOrLetObject let = (ForOrLetObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<ForOrLetObject> letClause = new Vector();
       letClause.add(let);
       RESULT = letClause; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("let_clause",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // for_clause ::= for_clause COMMA for_expr 
            {
              Vector<ForOrLetObject> RESULT =null;
		int forCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<ForOrLetObject> forC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int forExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForOrLetObject forExpr = (ForOrLetObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<ForOrLetObject> forClause = new Vector();
       forClause.add(forExpr);
       forClause.addAll(forC);
       RESULT = forClause; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // for_clause ::= for_expr 
            {
              Vector<ForOrLetObject> RESULT =null;
		int forExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForOrLetObject forExpr = (ForOrLetObject)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<ForOrLetObject> forClause = new Vector();
       forClause.add(forExpr);
       RESULT = forClause; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // gql_expr ::= LET let_clause FOR for_clause WHERE where_clause RETURN return_clause 
            {
              Query RESULT =null;
		int letCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int letCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector<ForOrLetObject> letC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int forCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector<ForOrLetObject> forC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int whereCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whereCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap whereC = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int returnCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Argument> returnC = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Query q = new Query(letC, forC, whereC, returnC);
       RESULT = q; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gql_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // gql_expr ::= FOR for_clause WHERE where_clause RETURN return_clause 
            {
              Query RESULT =null;
		int forCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int forCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector<ForOrLetObject> forC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int whereCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int whereCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap whereC = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int returnCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Argument> returnC = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Query q = new Query(forC, whereC, returnC);
       RESULT = q; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gql_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // gql_expr ::= LET let_clause FOR for_clause RETURN return_clause 
            {
              Query RESULT =null;
		int letCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int letCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector<ForOrLetObject> letC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int forCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<ForOrLetObject> forC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int returnCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Argument> returnC = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Query q = new Query(letC, forC, returnC);
       RESULT = q; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gql_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // gql_expr ::= FOR for_clause RETURN return_clause 
            {
              Query RESULT =null;
		int forCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int forCright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<ForOrLetObject> forC = (Vector<ForOrLetObject>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int returnCleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnCright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Argument> returnC = (LinkedList<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Query q = new Query(forC, returnC);
       RESULT = q; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gql_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= gql EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Query start_val = (Query)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // gql ::= gql_expr SEMI 
            {
              Query RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Query expr = (Query)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gql",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

